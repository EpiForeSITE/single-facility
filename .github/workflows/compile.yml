---
name: Compile Simulation

'on':
  push:
    branches:
      - main
      - master
      - develop
  pull_request:
    branches:
      - main
      - master
      - develop

jobs:
  compile:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java 11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Cache Repast Simphony
        id: cache-repast
        uses: actions/cache@v4
        with:
          path: ~/repast-simphony
          key: repast-simphony-2.11.0

      - name: Download and extract Repast Simphony
        if: steps.cache-repast.outputs.cache-hit != 'true'
        run: |
          echo "Downloading Repast Simphony 2.11.0..."
          mkdir -p ~/repast-simphony
          cd ~/repast-simphony

          # NOTE: SourceForge downloads are currently blocked by firewall
          # This step requires repository admin to either:
          # 1. Add sourceforge.net to the allowed domains in Copilot settings
          # 2. Store Repast Simphony JARs in GitHub Releases
          # 3. Use a mirror or alternative download location

          echo "ERROR: Cannot download Repast Simphony"
          echo ""
          echo "SourceForge is blocked by the firewall."
          echo "To fix this, a repository admin needs to:"
          echo ""
          echo "Option 1: Add sourceforge.net to allowed domains"
          echo "  Go to: Settings > Copilot > Coding Agent"
          echo "  Add: sourceforge.net, downloads.sourceforge.net"
          echo ""
          echo "Option 2: Store Repast JARs in GitHub"
          echo "  - Download Repast Simphony 2.11.0 locally"
          echo "  - Upload as a GitHub Release asset"
          echo "  - Update workflow to download from GitHub"
          echo ""
          echo "Option 3: Commit essential JARs to repository"
          echo "  - Extract needed JARs from Repast installation"
          echo "  - Commit to lib/ directory (if size permits)"
          echo ""
          exit 1

      - name: Verify Repast installation
        run: |
          echo "Checking Repast installation..."
          ls -la ~/repast-simphony/
          if [ -d ~/repast-simphony/repast-simphony-2.11 ]; then
            echo "Found Repast directory"
            ls -la ~/repast-simphony/repast-simphony-2.11/
          elif [ -d ~/repast-simphony/Repast-Simphony-2.11 ]; then
            echo "Found Repast directory (alt name)"
            ls -la ~/repast-simphony/Repast-Simphony-2.11/
          else
            echo "Searching for Repast installation..."
            find ~/repast-simphony -maxdepth 3 -type d \
              -name "*eclipse*" -o -name "*plugin*"
          fi

      - name: Create bin directory
        run: mkdir -p bin

      - name: Configure Repast path for compilation
        run: |
          # Find the actual Repast installation directory
          if [ -d ~/repast-simphony/repast-simphony-2.11 ]; then
            REPAST_DIR=~/repast-simphony/repast-simphony-2.11
          elif [ -d ~/repast-simphony/Repast-Simphony-2.11 ]; then
            REPAST_DIR=~/repast-simphony/Repast-Simphony-2.11
          else
            # Find it dynamically
            REPAST_DIR=$(find ~/repast-simphony -maxdepth 2 -type d \
              -name "*epast*" -o -name "*imphony*" | head -1)
          fi

          echo "REPAST_HOME=$REPAST_DIR" >> $GITHUB_ENV
          echo "Repast home set to: $REPAST_DIR"

      - name: Compile simulation
        run: |
          echo "Compiling simulation with Repast at $REPAST_HOME..."

          # Set up the classpath similar to Makefile
          REPAST_PLUGINS_DIR="$REPAST_HOME/eclipse/plugins"

          if [ ! -d "$REPAST_PLUGINS_DIR" ]; then
            echo "ERROR: Cannot find Repast plugins directory"
            echo "  at $REPAST_PLUGINS_DIR"
            echo "Searching for plugins..."
            find ~/repast-simphony -type d -name "plugins"
            exit 1
          fi

          echo "Using plugins directory: $REPAST_PLUGINS_DIR"

          # Build classpath
          JAR_PATH="$REPAST_PLUGINS_DIR/"
          JAR_PATH="${JAR_PATH}repast.simphony.bin_and_src_2.11.0/"
          JAR_PATH="${JAR_PATH}repast.simphony.bin_and_src.jar"
          BIN_JAR="$JAR_PATH"

          if [ ! -f "$BIN_JAR" ]; then
            echo "ERROR: Cannot find main Repast JAR at $BIN_JAR"
            echo "Available plugins:"
            ls -la "$REPAST_PLUGINS_DIR" | grep repast || \
              echo "No repast plugins found"
            exit 1
          fi

          CLASSPATH="bin:$BIN_JAR"
          RT="$REPAST_PLUGINS_DIR/repast.simphony.runtime_2.11.0/lib/*"
          CLASSPATH="$CLASSPATH:$RT"
          CO="$REPAST_PLUGINS_DIR/repast.simphony.core_2.11.0/lib/*"
          CLASSPATH="$CLASSPATH:$CO"
          BA="$REPAST_PLUGINS_DIR/repast.simphony.batch_2.11.0/lib/*"
          CLASSPATH="$CLASSPATH:$BA"
          DA="$REPAST_PLUGINS_DIR/repast.simphony.data_2.11.0/lib/*"
          CLASSPATH="$CLASSPATH:$DA"
          ES="$REPAST_PLUGINS_DIR/repast.simphony.essentials_2.11.0/lib/*"
          CLASSPATH="$CLASSPATH:$ES"
          LI="$REPAST_PLUGINS_DIR/libs.ext_2.11.0/lib/*"
          CLASSPATH="$CLASSPATH:$LI"

          echo "Classpath configured"

          # Compile all Java files
          echo "Compiling Java sources..."
          find src -name "*.java" -print | \
            xargs javac -cp "$CLASSPATH" -d bin

          echo "Compilation complete!"

      - name: Verify compilation
        run: |
          echo "Checking compiled classes..."
          find bin -name "*.class" | head -20
          CLASS_COUNT=$(find bin -name "*.class" | wc -l)
          echo "Total compiled classes: $CLASS_COUNT"

          if [ $CLASS_COUNT -eq 0 ]; then
            echo "ERROR: No classes were compiled!"
            exit 1
          else
            MSG="SUCCESS: Compilation completed with "
            MSG="${MSG}$CLASS_COUNT classes"
            echo "$MSG"
          fi
