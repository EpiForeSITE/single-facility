---
title: "Patient Timeline Analysis"
format: 
  html:
    toc: true
    toc-depth: 3
    code-fold: true
    code-summary: "Show code"
    embed-resources: true
editor: visual
params:
  patient_id: 13094
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(dplyr)
library(knitr)
library(ggplot2)
```

# Patient Timeline Analysis

::: {.callout-tip}
## How to Change Patient
To analyze a different patient, change the `patient_id` parameter in the YAML header above and re-render the document.

**Quick Patient Selection Guide:**
- **High Activity Patients**: See the top 20 table below
- **Random Selection**: Any ID from the discharged patients list
- **Current Patient**: `r params$patient_id`
:::

This report provides a comprehensive timeline of all events for a specific patient across all simulation data files.

## Patient Event Summary

First, let's see which patients have the most and least events across all data files:

```{r patient-event-counts, echo=TRUE}
# Function to safely read files
safe_read_lines <- function(file_path) {
  if (file.exists(file_path)) {
    return(readLines(file_path, warn = FALSE))
  } else {
    warning(paste("File not found:", file_path))
    return(character(0))
  }
}

# Read all data files
admissions_data <- safe_read_lines("../admissions.txt")
clinical_detection_data <- safe_read_lines("../clinicalDetection.txt")
transmissions_data <- safe_read_lines("../transmissions.txt")
decolonization_data <- safe_read_lines("../decolonization.txt")
surveillance_data <- safe_read_lines("../surveillance.txt")

# Load discharged patients to get the valid patient ID range
discharged_patients <- read.csv("../discharged_patients.csv", stringsAsFactors = FALSE)
valid_patient_ids <- discharged_patients$id

cat("Analyzing events for", length(valid_patient_ids), "discharged patients\n\n")

# Function to extract patient IDs from different file formats
extract_patient_ids <- function(lines, pattern) {
  matches <- regmatches(lines, regexec(pattern, lines))
  valid_matches <- matches[sapply(matches, length) > 0]
  if (length(valid_matches) > 0) {
    return(as.numeric(sapply(valid_matches, function(x) x[2])))
  }
  return(numeric(0))
}

# Extract patient IDs from each data source
admission_ids <- extract_patient_ids(admissions_data, "Patient ID: (\\d+)")
clinical_ids <- extract_patient_ids(clinical_detection_data, "Detected Patient: (\\d+)")
transmission_patient1_ids <- extract_patient_ids(transmissions_data, "Patient1: (\\d+)")
transmission_patient2_ids <- extract_patient_ids(transmissions_data, "Patient2: (\\d+)")
decolonization_ids <- extract_patient_ids(decolonization_data, "Decolonized Patient: (\\d+)")
surveillance_ids <- extract_patient_ids(surveillance_data, "Patient: (\\d+)")

# Combine all patient IDs and count events per patient
all_patient_events <- c(
  admission_ids,
  clinical_ids,
  transmission_patient1_ids,
  transmission_patient2_ids,
  decolonization_ids,
  surveillance_ids
)

# Filter to only include discharged patients
all_patient_events <- all_patient_events[all_patient_events %in% valid_patient_ids]

# Count events per patient
event_counts <- table(all_patient_events)
event_summary <- data.frame(
  patient_id = as.numeric(names(event_counts)),
  total_events = as.numeric(event_counts)
) %>%
  arrange(desc(total_events))

# Add patients with zero events (discharged but no events in other files)
zero_event_patients <- valid_patient_ids[!valid_patient_ids %in% event_summary$patient_id]
if (length(zero_event_patients) > 0) {
  zero_events_df <- data.frame(
    patient_id = zero_event_patients,
    total_events = 0
  )
  event_summary <- rbind(event_summary, zero_events_df) %>%
    arrange(desc(total_events), patient_id)
}

# Create top 20 and bottom 20 tables
top_20 <- event_summary %>%
  slice_head(n = 20) %>%
  mutate(rank = row_number())

bottom_20 <- event_summary %>%
  slice_tail(n = 20) %>%
  mutate(rank = (nrow(event_summary) - 19):nrow(event_summary)) %>%
  arrange(rank)

cat("Total discharged patients analyzed:", nrow(event_summary), "\n")
cat("Patients with events:", sum(event_summary$total_events > 0), "\n")
cat("Patients with no events:", sum(event_summary$total_events == 0), "\n")
cat("Range of events per patient:", min(event_summary$total_events), "to", max(event_summary$total_events), "\n\n")

# Display tables
kable(top_20, 
      caption = "Top 20 Discharged Patients by Number of Events",
      col.names = c("Patient ID", "Total Events", "Rank"))
```

```{r bottom-patients}
kable(bottom_20, 
      caption = "Bottom 20 Patients by Number of Events", 
      col.names = c("Patient ID", "Total Events", "Rank"))
```

------------------------------------------------------------------------

**Target Patient ID:** `r params$patient_id`

```{r patient-context}
# Show where the target patient ranks
target_rank <- which(event_summary$patient_id == params$patient_id)
target_events <- event_summary$total_events[target_rank]

if (length(target_rank) > 0) {
  cat("Target Patient", params$patient_id, "ranks #", target_rank, "out of", nrow(event_summary), "patients\n")
  cat("Target Patient has", target_events, "total events\n")
} else {
  cat("Target Patient", params$patient_id, "not found in event data\n")
}
```

```{r load-data, echo=TRUE}
# Function to safely read files
safe_read_lines <- function(file_path) {
  if (file.exists(file_path)) {
    return(readLines(file_path, warn = FALSE))
  } else {
    warning(paste("File not found:", file_path))
    return(character(0))
  }
}

# Read all data files
admissions_data <- safe_read_lines("../admissions.txt")
clinical_detection_data <- safe_read_lines("../clinicalDetection.txt")
transmissions_data <- safe_read_lines("../transmissions.txt")
decolonization_data <- safe_read_lines("../decolonization.txt")
surveillance_data <- safe_read_lines("../surveillance.txt")

cat("Data files loaded:\n")
cat("- Admissions:", length(admissions_data), "records\n")
cat("- Clinical Detection:", length(clinical_detection_data), "records\n")
cat("- Transmissions:", length(transmissions_data), "records\n")
cat("- Decolonization:", length(decolonization_data), "records\n")
cat("- Surveillance:", length(surveillance_data), "records\n")
```

```{r parse-functions, echo=TRUE}
# Function to parse admissions data
parse_admissions <- function(lines, target_id) {
  pattern <- "Time: ([^,]+), Patient ID: (\\d+), Importation: (true|false)"
  matches <- regmatches(lines, regexec(pattern, lines))
  
  events <- data.frame()
  for (match in matches) {
    if (length(match) == 4 && match[1] != "") {
      time <- as.numeric(match[2])
      patient_id <- as.numeric(match[3])
      importation <- match[4] == "true"
      
      if (patient_id == target_id) {
        events <- rbind(events, data.frame(
          time = time,
          event_type = "Admission",
          patient_id = patient_id,
          details = paste("Importation:", importation),
          stringsAsFactors = FALSE
        ))
      }
    }
  }
  return(events)
}

# Function to parse clinical detection data
parse_clinical_detection <- function(lines, target_id) {
  pattern <- "Time: ([^,]+), Detected Patient: (\\d+), DetectionCount: (\\d+)"
  matches <- regmatches(lines, regexec(pattern, lines))
  
  events <- data.frame()
  for (match in matches) {
    if (length(match) == 4 && match[1] != "") {
      time <- as.numeric(match[2])
      patient_id <- as.numeric(match[3])
      detection_count <- as.numeric(match[4])
      
      if (patient_id == target_id) {
        events <- rbind(events, data.frame(
          time = time,
          event_type = "Clinical Detection",
          patient_id = patient_id,
          details = paste("Detection Count:", detection_count),
          stringsAsFactors = FALSE
        ))
      }
    }
  }
  return(events)
}

# Function to parse transmission data
parse_transmissions <- function(lines, target_id) {
  pattern <- "Time: ([^,]+), Patient1: (\\d+), Patient2: (\\d+)"
  matches <- regmatches(lines, regexec(pattern, lines))
  
  events <- data.frame()
  for (match in matches) {
    if (length(match) == 4 && match[1] != "") {
      time <- as.numeric(match[2])
      patient1_id <- as.numeric(match[3])
      patient2_id <- as.numeric(match[4])
      
      if (patient1_id == target_id) {
        events <- rbind(events, data.frame(
          time = time,
          event_type = "Transmission (Source)",
          patient_id = patient1_id,
          details = paste("Transmitted to Patient", patient2_id),
          stringsAsFactors = FALSE
        ))
      }
      
      if (patient2_id == target_id) {
        events <- rbind(events, data.frame(
          time = time,
          event_type = "Transmission (Recipient)",
          patient_id = patient2_id,
          details = paste("Received from Patient", patient1_id),
          stringsAsFactors = FALSE
        ))
      }
    }
  }
  return(events)
}

# Function to parse decolonization data
parse_decolonization <- function(lines, target_id) {
  pattern <- "Time: ([^,]+), Decolonized Patient: (\\d+)"
  matches <- regmatches(lines, regexec(pattern, lines))
  
  events <- data.frame()
  for (match in matches) {
    if (length(match) == 3 && match[1] != "") {
      time <- as.numeric(match[2])
      patient_id <- as.numeric(match[3])
      
      if (patient_id == target_id) {
        events <- rbind(events, data.frame(
          time = time,
          event_type = "Decolonization",
          patient_id = patient_id,
          details = "Patient decolonized",
          stringsAsFactors = FALSE
        ))
      }
    }
  }
  return(events)
}

# Function to parse surveillance data
parse_surveillance <- function(lines, target_id) {
  pattern <- "Time: ([^,]+), Patient: (\\d+), Colonized: (true|false), Detected: (true|false)"
  matches <- regmatches(lines, regexec(pattern, lines))
  
  events <- data.frame()
  for (match in matches) {
    if (length(match) == 5 && match[1] != "") {
      time <- as.numeric(match[2])
      patient_id <- as.numeric(match[3])
      colonized <- match[4] == "true"
      detected <- match[5] == "true"
      
      if (patient_id == target_id) {
        events <- rbind(events, data.frame(
          time = time,
          event_type = "Surveillance",
          patient_id = patient_id,
          details = paste("Colonized:", colonized, "| Detected:", detected),
          stringsAsFactors = FALSE
        ))
      }
    }
  }
  return(events)
}

# Function to get discharge information
get_discharge_info <- function(target_id) {
  discharged_patients <- read.csv("../discharged_patients.csv", stringsAsFactors = FALSE)
  patient_row <- discharged_patients[discharged_patients$id == target_id, ]
  
  if (nrow(patient_row) > 0) {
    discharge_event <- data.frame(
      time = patient_row$dischargeTime,
      event_type = "Discharge",
      patient_id = target_id,
      details = paste("LOS:", round(patient_row$los, 2), "days | Colonized:", patient_row$isColonized, 
                     "| Detected:", patient_row$isDetected, "| Isolated:", patient_row$isIsolated),
      stringsAsFactors = FALSE
    )
    return(discharge_event)
  } else {
    return(data.frame())
  }
}
```

```         
)
return(discharge_event)
```

} else { return(data.frame()) } }

```{r extract-events, echo=TRUE}
# Extract events for the target patient
target_patient <- params$patient_id

cat("Extracting events for Patient ID:", target_patient, "\n\n")

# Parse each data source
admission_events <- parse_admissions(admissions_data, target_patient)
clinical_events <- parse_clinical_detection(clinical_detection_data, target_patient)
transmission_events <- parse_transmissions(transmissions_data, target_patient)
decolonization_events <- parse_decolonization(decolonization_data, target_patient)
surveillance_events <- parse_surveillance(surveillance_data, target_patient)
discharge_event <- get_discharge_info(target_patient)

# Combine all events
all_events <- rbind(
  admission_events,
  clinical_events,
  transmission_events,
  decolonization_events,
  surveillance_events,
  discharge_event
)

# Sort by time and add event numbering
if (nrow(all_events) > 0) {
  # Ensure time column is numeric and handle any missing values
  all_events$time <- as.numeric(all_events$time)
  
  # Sort by time (chronological order)
  all_events <- all_events[order(all_events$time), ]
  
  # Add sequential event numbers
  all_events$event_number <- 1:nrow(all_events)
  
  cat("Events sorted chronologically from", round(min(all_events$time), 2), 
      "to", round(max(all_events$time), 2), "time units\n")
} else {
  cat("No events found for Patient ID:", target_patient, "\n")
}

cat("Event counts by type:\n")
if (nrow(all_events) > 0) {
  event_summary <- table(all_events$event_type)
  print(event_summary)
  cat("\nTotal events:", nrow(all_events), "\n")
} else {
  cat("No events found.\n")
}
```

## Patient Timeline Summary

```{r timeline-summary, echo=FALSE}
if (nrow(all_events) > 0) {
  cat("**Patient ID:**", target_patient, "\n")
  cat("**Total Events:**", nrow(all_events), "\n")
  cat("**First Event:**", min(all_events$time), "\n")
  cat("**Last Event:**", max(all_events$time), "\n")
  cat("**Duration:**", max(all_events$time) - min(all_events$time), "time units\n")
} else {
  cat("No events found for Patient ID:", target_patient)
}
```

## Detailed Event Timeline

```{r detailed-timeline, echo=FALSE}
if (nrow(all_events) > 0) {
  # Create a nicely formatted table
  timeline_table <- all_events %>%
    select(event_number, time, event_type, details) %>%
    rename(
      "#" = event_number,
      "Time" = time,
      "Event Type" = event_type,
      "Details" = details
    )
  
  # Display with DT for interactive table
  DT::datatable(timeline_table, 
                options = list(pageLength = 25, scrollX = TRUE),
                caption = paste("Complete Timeline for Patient", target_patient))
} else {
  cat("No events to display.")
}
```

## Event Type Visualization

```{r event-visualization, echo=FALSE}
if (nrow(all_events) > 0) {
  # Create a timeline plot
  ggplot(all_events, aes(x = time, y = event_type, color = event_type)) +
    geom_point(size = 3, alpha = 0.7) +
    geom_line(aes(group = 1), alpha = 0.3) +
    theme_minimal() +
    labs(
      title = paste("Event Timeline for Patient", target_patient),
      x = "Time",
      y = "Event Type",
      color = "Event Type"
    ) +
    theme(axis.text.y = element_text(size = 10),
          legend.position = "bottom") +
    guides(color = guide_legend(override.aes = list(size = 4)))
}
```

## Event Distribution

```{r event-distribution, echo=FALSE}
if (nrow(all_events) > 0 && length(unique(all_events$event_type)) > 1) {
  # Bar plot of event types
  event_counts <- all_events %>%
    count(event_type) %>%
    arrange(desc(n))
  
  ggplot(event_counts, aes(x = reorder(event_type, n), y = n, fill = event_type)) +
    geom_bar(stat = "identity") +
    coord_flip() +
    theme_minimal() +
    labs(
      title = paste("Event Distribution for Patient", target_patient),
      x = "Event Type",
      y = "Number of Events",
      fill = "Event Type"
    ) +
    theme(legend.position = "none")
}
```

## Usage Instructions

To generate a report for a different patient, you can render this document with different parameters:

``` r
# Example: Generate report for Patient ID 123
quarto::quarto_render("patient_timeline_analysis.qmd", 
                      execute_params = list(patient_id = 123))
```

Or from the command line:

``` bash
quarto render patient_timeline_analysis.qmd -P patient_id:123
```

## Data File Descriptions

-   **Admissions**: Records when patients are admitted to the facility
-   **Clinical Detection**: Records when patients are clinically detected as positive
-   **Transmissions**: Records transmission events between patients
-   **Decolonization**: Records when patients are decolonized
-   **Surveillance**: Records surveillance testing results over time