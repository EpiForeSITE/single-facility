{
  "hash": "a2a0347e8bd8fdc896c1f07401a7d08d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Patient Timeline Analysis\"\nformat: \n  html:\n    toc: true\n    toc-depth: 3\n    code-fold: true\n    code-summary: \"Show code\"\n    embed-resources: true\neditor: visual\nparams:\n  patient_id: 77\n---\n\n\n\n# Patient Timeline Report\n\nThis report provides a comprehensive timeline of all events for a specific patient across all simulation data files.\n\n**Target Patient ID:** 77\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to safely read files\nsafe_read_lines <- function(file_path) {\n  if (file.exists(file_path)) {\n    return(readLines(file_path, warn = FALSE))\n  } else {\n    warning(paste(\"File not found:\", file_path))\n    return(character(0))\n  }\n}\n\n# Read all data files\nadmissions_data <- safe_read_lines(\"admissions.txt\")\nclinical_detection_data <- safe_read_lines(\"clinicalDetection.txt\")\ntransmissions_data <- safe_read_lines(\"transmissions.txt\")\ndecolonization_data <- safe_read_lines(\"decolonization.txt\")\nsurveillance_data <- safe_read_lines(\"surveillance.txt\")\n\ncat(\"Data files loaded:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nData files loaded:\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"- Admissions:\", length(admissions_data), \"records\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n- Admissions: 19310 records\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"- Clinical Detection:\", length(clinical_detection_data), \"records\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n- Clinical Detection: 90761 records\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"- Transmissions:\", length(transmissions_data), \"records\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n- Transmissions: 5678 records\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"- Decolonization:\", length(decolonization_data), \"records\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n- Decolonization: 9125 records\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"- Surveillance:\", length(surveillance_data), \"records\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n- Surveillance: 187483 records\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to parse admissions data\nparse_admissions <- function(lines, target_id) {\n  pattern <- \"Time: ([^,]+), Patient ID: (\\\\d+), Importation: (true|false)\"\n  matches <- regmatches(lines, regexec(pattern, lines))\n  \n  events <- data.frame()\n  for (match in matches) {\n    if (length(match) == 4 && match[1] != \"\") {\n      time <- as.numeric(match[2])\n      patient_id <- as.numeric(match[3])\n      importation <- match[4] == \"true\"\n      \n      if (patient_id == target_id) {\n        events <- rbind(events, data.frame(\n          time = time,\n          event_type = \"Admission\",\n          patient_id = patient_id,\n          details = paste(\"Importation:\", importation),\n          stringsAsFactors = FALSE\n        ))\n      }\n    }\n  }\n  return(events)\n}\n\n# Function to parse clinical detection data\nparse_clinical_detection <- function(lines, target_id) {\n  pattern <- \"Time: ([^,]+), Detected Patient: (\\\\d+)\"\n  matches <- regmatches(lines, regexec(pattern, lines))\n  \n  events <- data.frame()\n  for (match in matches) {\n    if (length(match) == 3 && match[1] != \"\") {\n      time <- as.numeric(match[2])\n      patient_id <- as.numeric(match[3])\n      \n      if (patient_id == target_id) {\n        events <- rbind(events, data.frame(\n          time = time,\n          event_type = \"Clinical Detection\",\n          patient_id = patient_id,\n          details = \"Patient clinically detected\",\n          stringsAsFactors = FALSE\n        ))\n      }\n    }\n  }\n  return(events)\n}\n\n# Function to parse transmission data\nparse_transmissions <- function(lines, target_id) {\n  pattern <- \"Time: ([^,]+), Patient1: (\\\\d+), Patient2: (\\\\d+)\"\n  matches <- regmatches(lines, regexec(pattern, lines))\n  \n  events <- data.frame()\n  for (match in matches) {\n    if (length(match) == 4 && match[1] != \"\") {\n      time <- as.numeric(match[2])\n      patient1_id <- as.numeric(match[3])\n      patient2_id <- as.numeric(match[4])\n      \n      if (patient1_id == target_id) {\n        events <- rbind(events, data.frame(\n          time = time,\n          event_type = \"Transmission (Source)\",\n          patient_id = patient1_id,\n          details = paste(\"Transmitted to Patient\", patient2_id),\n          stringsAsFactors = FALSE\n        ))\n      }\n      \n      if (patient2_id == target_id) {\n        events <- rbind(events, data.frame(\n          time = time,\n          event_type = \"Transmission (Recipient)\",\n          patient_id = patient2_id,\n          details = paste(\"Received from Patient\", patient1_id),\n          stringsAsFactors = FALSE\n        ))\n      }\n    }\n  }\n  return(events)\n}\n\n# Function to parse decolonization data\nparse_decolonization <- function(lines, target_id) {\n  pattern <- \"Time: ([^,]+), Decolonized Patient: (\\\\d+)\"\n  matches <- regmatches(lines, regexec(pattern, lines))\n  \n  events <- data.frame()\n  for (match in matches) {\n    if (length(match) == 3 && match[1] != \"\") {\n      time <- as.numeric(match[2])\n      patient_id <- as.numeric(match[3])\n      \n      if (patient_id == target_id) {\n        events <- rbind(events, data.frame(\n          time = time,\n          event_type = \"Decolonization\",\n          patient_id = patient_id,\n          details = \"Patient decolonized\",\n          stringsAsFactors = FALSE\n        ))\n      }\n    }\n  }\n  return(events)\n}\n\n# Function to parse surveillance data\nparse_surveillance <- function(lines, target_id) {\n  pattern <- \"Time: ([^,]+), Patient: (\\\\d+), Colonized: (true|false), Detected: (true|false)\"\n  matches <- regmatches(lines, regexec(pattern, lines))\n  \n  events <- data.frame()\n  for (match in matches) {\n    if (length(match) == 5 && match[1] != \"\") {\n      time <- as.numeric(match[2])\n      patient_id <- as.numeric(match[3])\n      colonized <- match[4] == \"true\"\n      detected <- match[5] == \"true\"\n      \n      if (patient_id == target_id) {\n        events <- rbind(events, data.frame(\n          time = time,\n          event_type = \"Surveillance\",\n          patient_id = patient_id,\n          details = paste(\"Colonized:\", colonized, \"| Detected:\", detected),\n          stringsAsFactors = FALSE\n        ))\n      }\n    }\n  }\n  return(events)\n}\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract events for the target patient\ntarget_patient <- params$patient_id\n\ncat(\"Extracting events for Patient ID:\", target_patient, \"\\n\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nExtracting events for Patient ID: 77 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Parse each data source\nadmission_events <- parse_admissions(admissions_data, target_patient)\nclinical_events <- parse_clinical_detection(clinical_detection_data, target_patient)\ntransmission_events <- parse_transmissions(transmissions_data, target_patient)\ndecolonization_events <- parse_decolonization(decolonization_data, target_patient)\nsurveillance_events <- parse_surveillance(surveillance_data, target_patient)\n\n# Combine all events\nall_events <- rbind(\n  admission_events,\n  clinical_events,\n  transmission_events,\n  decolonization_events,\n  surveillance_events\n)\n\n# Sort by time\nif (nrow(all_events) > 0) {\n  all_events <- all_events[order(all_events$time), ]\n  all_events$event_number <- 1:nrow(all_events)\n} else {\n  cat(\"No events found for Patient ID:\", target_patient, \"\\n\")\n}\n\ncat(\"Event counts by type:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEvent counts by type:\n```\n\n\n:::\n\n```{.r .cell-code}\nif (nrow(all_events) > 0) {\n  event_summary <- table(all_events$event_type)\n  print(event_summary)\n  cat(\"\\nTotal events:\", nrow(all_events), \"\\n\")\n} else {\n  cat(\"No events found.\\n\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n         Admission Clinical Detection     Decolonization \n                 1                  2                  1 \n\nTotal events: 4 \n```\n\n\n:::\n:::\n\n\n## Patient Timeline Summary\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n**Patient ID:** 77 \n**Total Events:** 4 \n**First Event:** 0.32 \n**Last Event:** 498.09 \n**Duration:** 497.77 time units\n```\n\n\n:::\n:::\n\n\n## Detailed Event Timeline\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-53d0a9ce51c81705c0fc\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-53d0a9ce51c81705c0fc\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"caption\":\"<caption>Complete Timeline for Patient 77<\\/caption>\",\"data\":[[\"1\",\"2\",\"4\",\"3\"],[1,2,3,4],[0.32,56.56,462.3,498.09],[\"Admission\",\"Clinical Detection\",\"Decolonization\",\"Clinical Detection\"],[\"Importation: TRUE\",\"Patient clinically detected\",\"Patient decolonized\",\"Patient clinically detected\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>#<\\/th>\\n      <th>Time<\\/th>\\n      <th>Event Type<\\/th>\\n      <th>Details<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":25,\"scrollX\":true,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,2]},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"#\",\"targets\":1},{\"name\":\"Time\",\"targets\":2},{\"name\":\"Event Type\",\"targets\":3},{\"name\":\"Details\",\"targets\":4}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n## Event Type Visualization\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](patient_timeline_analysis_files/figure-html/event-visualization-1.png){width=672}\n:::\n:::\n\n\n## Event Distribution\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](patient_timeline_analysis_files/figure-html/event-distribution-1.png){width=672}\n:::\n:::\n\n\n## Usage Instructions\n\nTo generate a report for a different patient, you can render this document with different parameters:\n\n```r\n# Example: Generate report for Patient ID 123\nquarto::quarto_render(\"patient_timeline_analysis.qmd\", \n                      execute_params = list(patient_id = 123))\n```\n\nOr from the command line:\n```bash\nquarto render patient_timeline_analysis.qmd -P patient_id:123\n```\n\n## Data File Descriptions\n\n- **Admissions**: Records when patients are admitted to the facility\n- **Clinical Detection**: Records when patients are clinically detected as positive\n- **Transmissions**: Records transmission events between patients\n- **Decolonization**: Records when patients are decolonized\n- **Surveillance**: Records surveillance testing results over time\n",
    "supporting": [
      "patient_timeline_analysis_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"patient_timeline_analysis_files/libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"patient_timeline_analysis_files/libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"patient_timeline_analysis_files/libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"patient_timeline_analysis_files/libs/datatables-binding-0.33/datatables.js\"></script>\n<script src=\"patient_timeline_analysis_files/libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"patient_timeline_analysis_files/libs/dt-core-1.13.6/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"patient_timeline_analysis_files/libs/dt-core-1.13.6/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"patient_timeline_analysis_files/libs/dt-core-1.13.6/js/jquery.dataTables.min.js\"></script>\n<link href=\"patient_timeline_analysis_files/libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"patient_timeline_analysis_files/libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}